// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SelfPoolSetWinner extends ethereum.Event {
  get params(): SelfPoolSetWinner__Params {
    return new SelfPoolSetWinner__Params(this);
  }
}

export class SelfPoolSetWinner__Params {
  _event: SelfPoolSetWinner;

  constructor(event: SelfPoolSetWinner) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SelfPoolStake extends ethereum.Event {
  get params(): SelfPoolStake__Params {
    return new SelfPoolStake__Params(this);
  }
}

export class SelfPoolStake__Params {
  _event: SelfPoolStake;

  constructor(event: SelfPoolStake) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SelfStakingPool extends ethereum.SmartContract {
  static bind(address: Address): SelfStakingPool {
    return new SelfStakingPool("SelfStakingPool", address);
  }

  capacity(): BigInt {
    let result = super.call("capacity", "capacity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_capacity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("capacity", "capacity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultAddress(): Address {
    let result = super.call("defaultAddress", "defaultAddress():(address)", []);

    return result[0].toAddress();
  }

  try_defaultAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultAddress",
      "defaultAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumberOfStakers(): BigInt {
    let result = super.call(
      "getNumberOfStakers",
      "getNumberOfStakers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfStakers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfStakers",
      "getNumberOfStakers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakers(): Array<Address> {
    let result = super.call("getStakers", "getStakers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getStakers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getStakers", "getStakers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getwinner(): Address {
    let result = super.call("getwinner", "getwinner():(address)", []);

    return result[0].toAddress();
  }

  try_getwinner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getwinner", "getwinner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockTime(): BigInt {
    let result = super.call("lockTime", "lockTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockTime", "lockTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolIsMature(): boolean {
    let result = super.call("poolIsMature", "poolIsMature():(bool)", []);

    return result[0].toBoolean();
  }

  try_poolIsMature(): ethereum.CallResult<boolean> {
    let result = super.tryCall("poolIsMature", "poolIsMature():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setWinner(): boolean {
    let result = super.call("setWinner", "setWinner():(bool)", []);

    return result[0].toBoolean();
  }

  try_setWinner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("setWinner", "setWinner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stake(_ticketValue: BigInt): boolean {
    let result = super.call("stake", "stake(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_ticketValue)
    ]);

    return result[0].toBoolean();
  }

  try_stake(_ticketValue: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("stake", "stake(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_ticketValue)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ticketValue(): BigInt {
    let result = super.call("ticketValue", "ticketValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ticketValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ticketValue", "ticketValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ticketValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _capacity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _ownerPercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetWinnerCall extends ethereum.Call {
  get inputs(): SetWinnerCall__Inputs {
    return new SetWinnerCall__Inputs(this);
  }

  get outputs(): SetWinnerCall__Outputs {
    return new SetWinnerCall__Outputs(this);
  }
}

export class SetWinnerCall__Inputs {
  _call: SetWinnerCall;

  constructor(call: SetWinnerCall) {
    this._call = call;
  }
}

export class SetWinnerCall__Outputs {
  _call: SetWinnerCall;

  constructor(call: SetWinnerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _ticketValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
